-- =============================================  
-- Handling SaleDate Conversion  
-- =============================================  
ALTER TABLE NashvilleHousing  
ALTER COLUMN SaleDate DATE;  

ALTER TABLE NashvilleHousing  
ADD SaleDateConverted DATE;  

UPDATE NashvilleHousing  
SET SaleDateConverted = CONVERT(DATE, SaleDate);  

-- Verify date conversion  
SELECT SaleDateConverted, SaleDate, CONVERT(DATE, SaleDate)   
FROM PortfolioProject.dbo.NashvilleHousing;

-- =============================================  
-- Standardizing Property Address  
-- =============================================  
-- Find missing property addresses  
SELECT DISTINCT a.ParcelID,   
                a.PropertyAddress,   
                b.ParcelID,   
                b.PropertyAddress  
FROM PortfolioProject.dbo.NashvilleHousing a  
JOIN PortfolioProject.dbo.NashvilleHousing b  
ON a.ParcelID = b.ParcelID   
AND a.[UniqueID] <> b.[UniqueID]  
WHERE a.PropertyAddress IS NULL  
ORDER BY a.ParcelID;  

-- Update missing property addresses  
UPDATE a  
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)  
FROM PortfolioProject.dbo.NashvilleHousing a  
JOIN PortfolioProject.dbo.NashvilleHousing b  
ON a.ParcelID = b.ParcelID   
AND a.[UniqueID] <> b.[UniqueID]  
WHERE a.PropertyAddress IS NULL;

-- =============================================  
-- Splitting Property Address into Address and City  
-- =============================================  
ALTER TABLE NashvilleHousing  
ADD SplitAddress NVARCHAR(225);  

UPDATE NashvilleHousing  
SET SplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1);  

ALTER TABLE NashvilleHousing  
ADD SplitCity NVARCHAR(225);  

UPDATE NashvilleHousing  
SET SplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress));  

SELECT SplitAddress, SplitCity  
FROM PortfolioProject.dbo.NashvilleHousing;

-- =============================================  
-- Splitting Owner Address into Components  
-- =================================------------  
ALTER TABLE NashvilleHousing  
ADD OwnerSplitAddress NVARCHAR(225);  

UPDATE NashvilleHousing  
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3);  

ALTER TABLE NashvilleHousing  
ADD OwnerSplitCity NVARCHAR(225);  

UPDATE NashvilleHousing  
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2);  

ALTER TABLE NashvilleHousing  
ADD OwnerSplitState NVARCHAR(225);  

UPDATE NashvilleHousing  
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1);

-- =============================================  
-- Standardizing SoldAsVacant Column  
-- =============================================  
SELECT DISTINCT SoldAsVacant, COUNT(SoldAsVacant)  
FROM PortfolioProject.dbo.NashvilleHousing  
GROUP BY SoldAsVacant  
ORDER BY 2;  

ALTER TABLE PortfolioProject.dbo.NashvilleHousing  
ADD Sold VARCHAR(3);  

UPDATE PortfolioProject.dbo.NashvilleHousing  
SET Sold = CASE  
    WHEN SoldAsVacant = 0 THEN 'No'  
    WHEN SoldAsVacant = 1 THEN 'Yes'  
    ELSE 'Unknown'  
END;  

ALTER TABLE PortfolioProject.dbo.NashvilleHousing  
DROP COLUMN SoldAsVacant;

-- =============================================  
-- Removing Duplicate Records  
-- Using ROW_NUMBER() method  
-- =============================================  
WITH RowNumCTE AS (  
    SELECT *,  
        ROW_NUMBER() OVER (  
            PARTITION BY ParcelID,  
                         PropertyAddress,  
                         SalePrice,  
                         SaleDate,  
                         LegalReference  
            ORDER BY UniqueID  
        ) row_num  
    FROM PortfolioProject.dbo.NashvilleHousing  
)  
SELECT *  
FROM RowNumCTE  
WHERE row_num > 1;  

-- Alternate method: Using GROUP BY to identify duplicates  
WITH dup AS (  
    SELECT PropertyAddress,  
           SalePrice,  
           SaleDate,  
           LegalReference,  
           COUNT(*) as countdup  
    FROM PortfolioProject.dbo.NashvilleHousing  
    GROUP BY PropertyAddress,  
           SalePrice,  
           SaleDate,  
           LegalReference  
    HAVING COUNT(*) > 1  
)  
SELECT *  -- Delete or process duplicates as needed  
FROM dup;
