/*
cleaning data
*/
select *
from PortfolioProject.dbo.NashvilleHousing
Select SaleDateConverted, SaleDate, convert(date, SaleDate)
from PortfolioProject.dbo.NashvilleHousing
alter table NashvilleHousing
alter column SaleDate  date;
alter table NashvilleHousing
add SaleDateConverted Date;
update NashvilleHousing
set SaleDateConverted = convert(date,SaleDate)
--populate property address data
Select distinct ParcelID
from PortfolioProject.dbo.NashvilleHousing
--where PropertyAddress is null
order by ParcelID
select a.ParcelID, a.PropertyAddress, b.ParcelID , b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
from PortfolioProject.dbo.NashvilleHousing a
join  PortfolioProject.dbo.NashvilleHousing b
on a.ParcelID = b.ParcelID
and a.[UniqueID] <> b.[UniqueID]
where a.PropertyAddress is null
update a
set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
from PortfolioProject.dbo.NashvilleHousing a
join  PortfolioProject.dbo.NashvilleHousing b
on a.ParcelID = b.ParcelID
and a.[UniqueID] <> b.[UniqueID]
where a.PropertyAddress is null
--Breaking property address into address, city, state
Select PropertyAddress
from PortfolioProject.dbo.NashvilleHousing
--where PropertyAddress is null
--order by ParcelID
select
substring(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) as Address,
substring(PropertyAddress, CHARINDEX(',', PropertyAddress)+1,len(PropertyAddress)) as city
from PortfolioProject.dbo.NashvilleHousing
alter table NashvilleHousing
add SplitAddress Nvarchar(225);
update NashvilleHousing
set SplitAddress = substring(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1)
alter table NashvilleHousing
add SplitCity Nvarchar(225);
update NashvilleHousing
set SplitCity = substring(PropertyAddress, CHARINDEX(',', PropertyAddress)+1,len(PropertyAddress))
select SplitAddress, SplitCity
from PortfolioProject.dbo.NashvilleHousing
--split owener address
select OwnerAddress
from PortfolioProject.dbo.NashvilleHousing
select
parsename(replace(OwnerAddress,',','.'), 3),
parsename(replace(OwnerAddress,',','.'), 2),
parsename(replace(OwnerAddress,',','.'), 1)
from PortfolioProject.dbo.NashvilleHousing
alter table NashvilleHousing
add OwnerSplitAddress Nvarchar(225);
update NashvilleHousing
set OwnerSplitAddress = parsename(replace(OwnerAddress,',','.'), 3)
alter table NashvilleHousing
add OwnerSplitCity Nvarchar(225);
update NashvilleHousing
set OwnerSplitCity = parsename(replace(OwnerAddress,',','.'), 2)
alter table NashvilleHousing
add OwnerSplitState Nvarchar(225);
update NashvilleHousing
set OwnerSplitState = parsename(replace(OwnerAddress,',','.'), 1)
--change 0 and 1 to yes and no
select distinct(SoldAsVacant), count(SoldAsVacant)
from PortfolioProject.dbo.NashvilleHousing
group by SoldAsVacant
order by 2
select SoldAsVacant
, case when SoldAsVacant = 0 then 'No'
when SoldAsVacant = 1 then 'Yes'
else cast(SoldAsVacant as varchar(10))
end
from PortfolioProject.dbo.NashvilleHousing
alter table PortfolioProject.dbo.NashvilleHousing
add Sold varchar(3)
update PortfolioProject.dbo.NashvilleHousing
set Sold = case
when SoldAsVacant = 0 then 'No'
when SoldAsVacant =1 then 'Yes'
else 'Unknown'
end
alter table PortfolioProject.dbo.NashvilleHousing
drop column SoldAsVacant
--delete duplicate
--way 1: using row number and cte
with RowNumCTE as(
select *,
ROW_NUMBER() over (
partition by ParcelID,
PropertyAddress,
SalePrice,
SaleDate,
LegalReference
Order by
UniqueID
) row_num
from PortfolioProject.dbo.NashvilleHousing
)
select *
from RowNumCTE
where row_num >1
--way 2: using group by to group the rows that have same attributes (except ID), then select rows which have count >1
with dup as(
select count() as countdup
from PortfolioProject.dbo.NashvilleHousing
group by PropertyAddress,
SalePrice,
SaleDate,
LegalReference
having count()=1
)
select *  --delete
from dup
